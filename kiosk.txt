#!/bin/bash

if [ ! -f /usr/bin/raspi-config ]; then
    echo "This script only works on a Raspberry Pi!"
	exit 1
fi


clear

echo "



  CANDLE - ADDING A TOUCH SCREEN

  This script will install touch screen support,
  and install a privacy friendly browser
  called 'Ungoogled Chromium'.

  It will then set things up so that your device
  will automatically start this browser in 
  full screen 'kiosk mode' when it boots up.

  Installation could take up to 30 minutes,
  depending on your device and internet speed.


  Starting in 5 seconds...

"
sleep 5



#
# 1. Install software
#


# Set a locale
export LC_ALL="en_GB.UTF-8"

# remove old .Xauthority file if it exists
#rm /home/pi/.Xauthority


# Create Candle directory
rm -rf /home/pi/candle
mkdir -p /home/pi/candle


clear
echo ""
echo "1 (of 7). Inquiring about the latest software versions"
echo ""
sleep 2
apt-get update --allow-releaseinfo-change


#clear
echo ""
echo "2 (of 7). Installing the minimal desktop"
echo ""
sleep 2
# xorgxrdp 
apt-get install --no-install-recommends xserver-xorg x11-xserver-utils xserver-xorg-legacy xinit openbox wmctrl xdotool feh omxplayer fbi unclutter lsb-release xfonts-base libinput-tools -y


# Remove all the keyboard shortcuts from Openbox, replace them with a simpler file
# temporarily disabled

#if [ -f /etc/xdg/openbox/rc.xml ]
#then
#mv -n /etc/xdg/openbox/rc.xml /etc/xdg/openbox/rc-bak.xml
#wget https://www.candlesmarthome.com/tools/rc.xml -P /etc/xdg/openbox/
#fi


#clear
echo ""
echo "3 (of 7). Downloading the Ungoogled Chriomium browser"
echo ""
sleep 2
wget https://candlesmarthome.com/tools/ungoogled-chromium-common_83.0.4103.116-1.buster1_armhf.deb
wget https://candlesmarthome.com/tools/ungoogled-chromium_83.0.4103.116-1.buster1_armhf.deb
wget https://candlesmarthome.com/tools/ungoogled-chromium-sandbox_83.0.4103.116-1.buster1_armhf.deb


#clear
echo ""
echo "4 (of 7). Installing the Ungoogled Chriomium browser"
echo ""
sleep 2
apt-get --no-install-recommends install ./ungoogled-chromium-common_83.0.4103.116-1.buster1_armhf.deb -y
apt-get --no-install-recommends install ./ungoogled-chromium_83.0.4103.116-1.buster1_armhf.deb -y
apt-get --no-install-recommends install ./ungoogled-chromium-sandbox_83.0.4103.116-1.buster1_armhf.deb -y


# Just to be safe, let's try to fix the installation
apt-get install --fix-missing
apt --fix-broken install -y


# Add policy file to disable things like file selection
mkdir -p /etc/chromium/policies/managed/
echo '{"AllowFileSelectionDialogs": false, "AudioCaptureAllowed": false}' > /etc/chromium/policies/managed/candle.json


# Clean up old installation files
rm -f ungoogled*.deb


#clear
echo ""
echo "5 (of 7). Downloading virtual keyboard extension for browser"
echo ""
sleep 2
wget https://www.candlesmarthome.com/tools/virtual_keyboard.zip -P /home/pi/candle/
unzip -o /home/pi/candle/virtual_keyboard.zip -d /home/pi/candle/
rm -f /home/pi/candle/virtual_keyboard.zip


#clear
echo ""
echo "6 (of 7). Installing Candle startup images"
echo ""
sleep 2


# Download picture shown when the device boots up
if [ ! -f /boot/splash.png ]
then
	wget https://www.candlesmarthome.com/tools/splash.png -P /boot/
	mkdir -p /usr/share/plymouth/themes/pix/
	cp /boot/splash.png /usr/share/plymouth/themes/pix/splash.png
fi


# Download video animation
if [ ! -f /boot/splash.mp4 ]
then
	wget https://www.candlesmarthome.com/tools/splash.mp4 -P /boot/
fi


# Create splash screen
if [ ! -f /etc/systemd/system/splashscreen.service ]
then
    echo "Adding splash screen"
	wget https://www.candlesmarthome.com/tools/splashservice.txt -O /etc/systemd/system/splashscreen.service
	systemctl enable splashscreen
else
	echo "NOT adding splash screen (/etc/systemd/system/splashscreen.service already exists)"
fi


# Download file that will be opened in the initial tab. This should never be shown, but is needed to get Chromium started.
#wget https://www.candlesmarthome.com/tools/tab1.html -P /home/pi/candle/





#
# 2. Create settings files
#
#clear
echo ""
echo "8 (of 7). Creating settings files"
echo ""


# Create Openbox autostart file
echo "- Creating Openbox autostart file"
rm -f /etc/xdg/openbox/autostart
wget https://www.candlesmarthome.com/tools/autostart.txt -O /etc/xdg/openbox/autostart


# Create candle_kiosk.txt file. Change the URL to set a different URL for the browser. Empty it to only show the splash video.
echo "- Creating candle_kiosk.txt file"
echo 'http://localhost:8080' > /boot/candle_kiosk.txt


# Modify the xinitrc file to automatically log in the pi user
echo "- Creating xinitrc file"
echo 'exec openbox-session' > /etc/X11/xinit/xinitrc



# Modify the xinitrc file to automatically log in the pi user
echo "- Creating xwrapper.config file"
echo "allowed_users=anybody" > /etc/X11/Xwrapper.config
echo "needs_root_rights=yes" >> /etc/X11/Xwrapper.config

# Set rc.local to check if the candle_kiosk.txt file is present. Only boot into the fullscreen browser if it is.
echo "- Creating rc.local file"
echo '#!/bin/bash' > /etc/rc.local
echo 'if [ -f /boot/candle_kiosk.txt ]' >> /etc/rc.local
echo 'then' >> /etc/rc.local
#echo '  chmod g+r /dev/tty2' >> /etc/rc.local
#echo '  chmod ug+s /usr/lib/xorg/Xorg' >> /etc/rc.local
echo '  if [ -n "$(ls /dev/input/by-id/*-mouse 2>/dev/null)" ]' >> /etc/rc.local
echo '  then' >> /etc/rc.local
echo '   su - pi -c startx &' >> /etc/rc.local
echo "   su - pi -c 'unclutter -idle 10 -root -display :0 &'" >> /etc/rc.local
echo '  else' >> /etc/rc.local
echo "   su - pi -c 'startx -- -nocursor &'" >> /etc/rc.local
echo "   su - pi -c 'unclutter -idle 0 -root -display :0 &'" >> /etc/rc.local
echo '  fi' >> /etc/rc.local
echo 'fi' >> /etc/rc.local
echo 'exit 0' >> /etc/rc.local


# Hides the Raspberry Pi logos shown at boot
isInFile2=$(cat /boot/config.txt | grep -c "disable_splash")
if [ $isInFile2 -eq 0 ]
then
	echo "- Adding disable_splash to config.txt"
	echo 'disable_splash=1' >> /boot/config.txt
else
    echo "- Splash was already disabled in config.txt"
fi


# Hide the text normally shown when linux boots up
isInFile=$(cat /boot/cmdline.txt | grep -c "tty3")
if [ $isInFile -eq 0 ]
then    
	echo "- Modifying cmdline.txt"
	# change text output to third console. press alt-shift-F3 during boot to see it again.
    sed -i 's/tty1/tty3/' /boot/cmdline.txt
	# hide all the small things normally shown at boot
	sed -i ' 1 s/.*/& quiet plymouth.ignore-serial-consoles splash logo.nologo vt.global_cursor_default=0/' /boot/cmdline.txt        
else
        echo "- The cmdline.txt file was already modified"
fi


# Sets more power for USB ports
isInFile3=$(cat /boot/config.txt | grep -c "max_usb_current")
if [ $isInFile3 -eq 0 ]
then
	echo "- Setting USB to deliver more current in config.txt"
	echo 'max_usb_current=1' >> /boot/config.txt
else
    echo "- USB was already set to deliver more current in config.txt"
fi


# Create shutdown script, which shows the logo again on shutdown
#echo '/usr/bin/fbi -d /dev/fb0 --noverbose -a /boot/splash.png' > /usr/lib/systemd/system-shutdown/candle.sh
#chmod +x /usr/lib/systemd/system-shutdown/candle.sh


# Set ownership of files in Candle folder to pi user
echo "- Setting candle directory ownership to pi user"
#chown -R pi /home/pi/candle
chown -R pi /home/pi

# allow Pi user to access tty, so that startX will boot.
#gpasswd -a pi tty


# Hide the login text (it will still be available on tty3 - connect a keyboard to your pi and press CTRl-ALT-F3 to see it)
systemctl enable getty@tty3.service
systemctl disable getty@tty1.service



#clear
echo "




  INSTALLATION COMPLETE

  Your Raspberry Pi will automatically reboot in 10 seconds.




"
sleep 9
echo "

  ...rebooting!

"
sleep 1
reboot now
